{"version":3,"sources":["components/Display/Display.module.css","components/InputForm/InputForm.module.css","components/Button/Button.module.css","serviceWorker.ts","components/Display/Display.tsx","components/Button/Button.tsx","components/InputForm/InputForm.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Display","props","digitClassName","displayedDigit","maxValue","s","counterStop","counter","textClassName","prompt","error","className","Button","btn","disabled","onClick","title","changeDigit","undefined","startValue","onSetButtonClick","InputForm","inputClassName","incorrectValue","input","type","value","inputDigit","onChange","e","Number","currentTarget","App","localStorageStartValue","localStorage","getItem","localStorageMaxValue","useEffect","setStartValue","setMaxValue","useState","setPrompt","disabledInc","setDisabledInc","disabledReset","setDisabledReset","disabledSet","setDisabledSet","setDisplayedDigit","onValueChange","disableButton","setItem","toString","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bd7551ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Display_counter__81KNO\",\"prompt\":\"Display_prompt__2eDMq\",\"error\":\"Display_error__1W8Ij\",\"counterStop\":\"Display_counterStop__3Z5jS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputForm_input__2u3Us\",\"incorrectValue\":\"InputForm_incorrectValue__1SsNJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1KABA\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport s from './Display.module.css';\r\n\r\ntype PropsType = {\r\n    displayedDigit: number\r\n    maxValue: number\r\n    prompt: string\r\n}\r\n\r\nexport function Display(props: PropsType) {\r\n\r\n    let digitClassName = props.displayedDigit === props.maxValue ? s.counterStop : s.counter\r\n    let textClassName = props.prompt === \"Incorrect value!\" ? s.error : s.prompt\r\n\r\n    return (\r\n        <div className={props.prompt ? textClassName : digitClassName}>\r\n            {props.prompt ? props.prompt : props.displayedDigit}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Button.module.css';\r\n\r\ntype PropsType = {\r\n    title: \"inc\" | \"reset\" | \"set\"\r\n    disabled: boolean\r\n    startValue?: number\r\n    displayedDigit?: number\r\n    changeDigit?: (displayedDigit: number) => void\r\n    onSetButtonClick?: () => void\r\n}\r\n\r\nexport function Button(props: PropsType) {\r\n\r\n    let onClickHandler = () => {\r\n        if (props.title === \"inc\") {\r\n            props.changeDigit && props.displayedDigit !== undefined\r\n            && props.changeDigit(props.displayedDigit + 1)\r\n        } else if (props.title === \"reset\") {\r\n            props.changeDigit && props.startValue !== undefined\r\n            && props.changeDigit(props.startValue)\r\n        } else if (props.title === \"set\") {\r\n            props.onSetButtonClick                //if props.onSetButtonClick is defined\r\n            && props.onSetButtonClick()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button className={s.btn} disabled={props.disabled} onClick={onClickHandler}>\r\n            {props.title}\r\n        </button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './InputForm.module.css';\r\n\r\ntype PropsType = {\r\n    inputDigit: number\r\n    title: string\r\n    onChange: (inputDigit: number, title: string) => void\r\n    prompt: string\r\n}\r\n\r\nexport function InputForm(props: PropsType) {\r\n\r\n    const onDigitInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let input = Number(e.currentTarget.value)\r\n        props.onChange(input, props.title)\r\n    }\r\n\r\n    let inputClassName = props.prompt === \"Incorrect value!\" ? s.incorrectValue : \"\"\r\n\r\n    return (\r\n        <div className={s.input}>\r\n            <label>{props.title}<input className={inputClassName} type={\"number\"} value={props.inputDigit} onChange={onDigitInput}/></label>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {Display} from \"./components/Display/Display\";\r\nimport {Button} from \"./components/Button/Button\";\r\nimport {InputForm} from \"./components/InputForm/InputForm\";\r\n\r\nfunction App() {\r\n    let localStorageStartValue = Number(localStorage.getItem(\"startValue\"))\r\n    let localStorageMaxValue = Number(localStorage.getItem(\"maxValue\"))\r\n\r\n    useEffect(() => {\r\n        setStartValue(localStorageStartValue)\r\n        setMaxValue(localStorageMaxValue)\r\n    }, [localStorageStartValue, localStorageMaxValue])\r\n\r\n    let [startValue, setStartValue] = useState<number>(0)\r\n    let [maxValue, setMaxValue] = useState<number>(5)\r\n    let [prompt, setPrompt] = useState<string>(\"\")\r\n    let [disabledInc, setDisabledInc] = useState<boolean>(false)\r\n    let [disabledReset, setDisabledReset] = useState<boolean>(false)\r\n    let [disabledSet, setDisabledSet] = useState<boolean>(true)\r\n    let [displayedDigit, setDisplayedDigit] = useState<number>(localStorageStartValue)\r\n\r\n    function onValueChange(inputDigit: number, title: string) {\r\n        if (title === \"start value:\") {\r\n            startValue = inputDigit\r\n            setStartValue(startValue)\r\n        } else if (title === \"max value:\") {\r\n            maxValue = inputDigit\r\n            setMaxValue(maxValue)\r\n        }\r\n        changePrompt()\r\n        setDisabledInc(true)\r\n        setDisabledReset(true)\r\n    }\r\n\r\n    function changePrompt() {\r\n        if (startValue < 0 || maxValue <= startValue) {\r\n            setDisabledSet(true)\r\n            setPrompt(\"Incorrect value!\")\r\n        } else {\r\n            setDisabledSet(false)\r\n            setPrompt(\"enter values and press 'set'\")\r\n        }\r\n    }\r\n\r\n    function onSetButtonClick() {\r\n        setDisabledSet(true)\r\n        setDisabledInc(false)\r\n        setDisabledReset(false)\r\n        setPrompt(\"\")\r\n        setDisplayedDigit(startValue)\r\n        localStorage.setItem(\"startValue\", startValue.toString())\r\n        localStorage.setItem(\"maxValue\", maxValue.toString())\r\n    }\r\n\r\n    function changeDigit(displayedDigit: number) {\r\n        setDisplayedDigit(displayedDigit)\r\n        disableButton(displayedDigit)\r\n    }\r\n\r\n    function disableButton(displayedDigit: number) {\r\n        if (displayedDigit === maxValue) {\r\n            setDisabledInc(true)\r\n        } else if (displayedDigit === startValue) {\r\n            setDisabledInc(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={\"app-wrapper\"}>\r\n            <div className=\"value-setter-wrapper\">\r\n                <div className=\"inputBlock\">\r\n                    <InputForm title={\"max value:\"} inputDigit={maxValue} onChange={onValueChange} prompt={prompt}/>\r\n                    <InputForm title={\"start value:\"} inputDigit={startValue} onChange={onValueChange}\r\n                               prompt={prompt}/>\r\n                </div>\r\n                <div className=\"btnBlock\">\r\n                    <Button title={\"set\"}\r\n                            disabled={disabledSet}\r\n                            onSetButtonClick={onSetButtonClick}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"counter-wrapper\">\r\n                <Display displayedDigit={displayedDigit} maxValue={maxValue} prompt={prompt}/>\r\n                <div className=\"btnBlock\">\r\n                    <Button title={\"inc\"} disabled={disabledInc} changeDigit={changeDigit}\r\n                            displayedDigit={displayedDigit}/>\r\n                    <Button title={\"reset\"} disabled={disabledReset} changeDigit={changeDigit} startValue={startValue}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}